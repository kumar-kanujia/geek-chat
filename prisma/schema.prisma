generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  account       Account?

  servers        Server[]
  memberProfiles MemberProfile[]

  createdAt DateTime @default(now())
  udpatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@index([email])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id])

  members MemberProfile[]

  createdAt DateTime @default(now())
  udpatedAt DateTime @updatedAt

  @@index([ownerId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model MemberProfile {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  Server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, serverId])
  @@index([userId, serverId])
}
